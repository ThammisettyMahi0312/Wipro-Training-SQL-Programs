-- Drop tables if they already exist, in dependency order
DROP TABLE IF EXISTS ROOM_ALLOCATION;
DROP TABLE IF EXISTS PATIENT_MASTER;
DROP TABLE IF EXISTS ROOM_MASTER;
DROP TABLE IF EXISTS DOCTOR_MASTER;


-- 1. Create DOCTOR_MASTER table
CREATE TABLE DOCTOR_MASTER (
    doctor_id VARCHAR(15) PRIMARY KEY,
    doctor_name VARCHAR(15) NOT NULL,
    dept VARCHAR(15) NOT NULL
);

-- Insert data into DOCTOR_MASTER
INSERT INTO DOCTOR_MASTER VALUES ('D0001', 'Ram', 'ENT');
INSERT INTO DOCTOR_MASTER VALUES ('D0002', 'Rajan', 'ENT');
INSERT INTO DOCTOR_MASTER VALUES ('D0003', 'Smita', 'Eye');
INSERT INTO DOCTOR_MASTER VALUES ('D0004', 'Bhavan', 'Surgery');
INSERT INTO DOCTOR_MASTER VALUES ('D0005', 'Sheela', 'Surgery');
INSERT INTO DOCTOR_MASTER VALUES ('D0006', 'Nethra', 'Surgery');


-- 2. Create ROOM_MASTER table
CREATE TABLE ROOM_MASTER (
    room_no VARCHAR(15) PRIMARY KEY,
    room_type VARCHAR(15) NOT NULL,
    status VARCHAR(15) NOT NULL
);

-- Insert data into ROOM_MASTER
INSERT INTO ROOM_MASTER VALUES ('R0001', 'AC', 'occupied');
INSERT INTO ROOM_MASTER VALUES ('R0002', 'Suite', 'vacant');
INSERT INTO ROOM_MASTER VALUES ('R0003', 'NonAC', 'vacant');
INSERT INTO ROOM_MASTER VALUES ('R0004', 'NonAC', 'occupied');
INSERT INTO ROOM_MASTER VALUES ('R0005', 'AC', 'vacant');
INSERT INTO ROOM_MASTER VALUES ('R0006', 'AC', 'occupied');


-- 3. Create PATIENT_MASTER table (doctor_id changed to VARCHAR(15))
CREATE TABLE PATIENT_MASTER (
    pid VARCHAR(15) PRIMARY KEY,
    name VARCHAR(15) NOT NULL,
    age INT NOT NULL,
    weight INT NOT NULL,
    gender VARCHAR(10) NOT NULL,
    address VARCHAR(50) NOT NULL,
    phoneno VARCHAR(10) NOT NULL,
    disease VARCHAR(50) NOT NULL,
    doctor_id VARCHAR(15) NOT NULL,
    FOREIGN KEY (doctor_id) REFERENCES DOCTOR_MASTER(doctor_id)
);

-- Insert data into PATIENT_MASTER
INSERT INTO PATIENT_MASTER VALUES ('P0001', 'Gita', 35, 65, 'F', 'Chennai', '9867145678', 'Eye Infection', 'D0003');
INSERT INTO PATIENT_MASTER VALUES ('P0002', 'Ashish', 40, 70, 'M', 'Delhi', '9845675678', 'Asthma', 'D0003');
INSERT INTO PATIENT_MASTER VALUES ('P0003', 'Radha', 25, 60, 'F', 'Chennai', '9867166678', 'Pain in heart', 'D0005');
INSERT INTO PATIENT_MASTER VALUES ('P0004', 'Chandra', 28, 55, 'F', 'Bangalore', '9978675567', 'Asthma', 'D0001');
INSERT INTO PATIENT_MASTER VALUES ('P0005', 'Goyal', 42, 65, 'M', 'Delhi', '8967533223', 'Pain in Stomach', 'D0004');


-- 4. Create ROOM_ALLOCATION table
CREATE TABLE ROOM_ALLOCATION (
    room_no VARCHAR(15),
    pid VARCHAR(15),
    admission_date DATE NOT NULL,
    release_date DATE,
    FOREIGN KEY (room_no) REFERENCES ROOM_MASTER(room_no),
    FOREIGN KEY (pid) REFERENCES PATIENT_MASTER(pid)
);

-- Insert data into ROOM_ALLOCATION
INSERT INTO ROOM_ALLOCATION VALUES ('R0001', 'P0001', '2016-10-15', '2016-10-26');
INSERT INTO ROOM_ALLOCATION VALUES ('R0002', 'P0002', '2016-11-15', '2016-11-26');
INSERT INTO ROOM_ALLOCATION VALUES ('R0002', 'P0003', '2016-12-01', '2016-12-30');
INSERT INTO ROOM_ALLOCATION VALUES ('R0004', 'P0001', '2017-01-01', '2017-01-30');


-- QUERIES

-- Query #1: Display the patients who were admitted in the month of January.
SELECT *
FROM PATIENT_MASTER p
JOIN ROOM_ALLOCATION r ON p.pid = r.pid
WHERE MONTH(r.admission_date) = 1;

-- Query #2: Display the female patient who is not suffering from asthma
SELECT *
FROM PATIENT_MASTER
WHERE gender = 'F' AND LOWER(disease) <> 'asthma';

-- Query #3: Count the number of male and female patients
SELECT gender, COUNT(*) AS patient_count
FROM PATIENT_MASTER
GROUP BY gender;

-- Query #4: Display the patient_id, patient_name, doctor_id, doctor_name, room_no, room_type and admission_date
SELECT 
    p.pid AS patient_id,
    p.name AS patient_name,
    d.doctor_id,
    d.doctor_name,
    r.room_no,
    rm.room_type,
    r.admission_date
FROM PATIENT_MASTER p
JOIN DOCTOR_MASTER d ON p.doctor_id = d.doctor_id
JOIN ROOM_ALLOCATION r ON p.pid = r.pid
JOIN ROOM_MASTER rm ON r.room_no = rm.room_no;

-- Query #5: Display the room_no which was never allocated to any patient
SELECT room_no
FROM ROOM_MASTER
WHERE room_no NOT IN (SELECT DISTINCT room_no FROM ROOM_ALLOCATION);

-- Query #6: Display the room_no, room_type which are allocated more than once
SELECT rm.room_no, rm.room_type
FROM ROOM_ALLOCATION ra
JOIN ROOM_MASTER rm ON ra.room_no = rm.room_no
GROUP BY rm.room_no, rm.room_type
HAVING COUNT(*) > 1;
